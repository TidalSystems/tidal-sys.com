<?php class Form_SuperForm extends Zend_Form {    public $options = 0;    public function __construct($options = null) {        $this->options = $options;        $this->setMethod('post');        $this->setName('kamalForm');        $this->setAttrib('class', '');        $this->setAttrib('id', '');        $this->setDecorators(array(            'FormElements',            array('HtmlTag', array('tag' => 'table' , 'class'=>'myformt' , 'align'=>'center')),            'Form',        ));        parent::__construct();    }    public function loadDecoration($deca = null)    {    		        $myDec = new Form_Decorator_MainDecorator();	        if(isset($this->options['dec']))	        	$myDec->myDec = $this->options['dec'];        	$myAllDec = $myDec->loadDecorator();                	if(isset($this->options['formFor']))	        	$this->setAttrib('for', $this->options['formFor']);	        	        if($deca == null)	        {	            $this->setElementDecorators($myAllDec['all']);	        }	        else	        {	            return $myAllDec[$deca];	        }    }    public function loadSubmit()    {        $submit = $this->createElement('submit', 'save');        $submit->setLabel('حفظ');        $submit->setDecorators($this->loadDecoration('submit'));        $submit->setAttrib('class', 'buttons');        $this->addElement($submit);    }    public function loadSubmitClose()    {        $submit = $this->createElement('submit', 'saveClose');        $submit->setLabel('حغظ');        $submit->setDecorators($this->loadDecoration('submit'));        $submit->setAttrib('class', 'buttons');        $this->addElement($submit);    }    public function is_active()    {        $is_active =  $this->createElement('checkbox','is_active');        $is_active->setAttrib('onclick',"var j = jQuery('#check').attr('disabled', jQuery('#check').attr('disabled') ? false : true)");        $is_active->setLabel('نعم / لا');        $is_active->setAttrib('class','checkboxcecked');        $this->addElement($is_active);    }    public function TextErea($name , $label , $rows = 20 ,$id = 'elm1' , $require = false)    {        $content = $this->createElement('textarea',$name);        $content->setAttrib('cols', 63);        $content->setAttrib('id', $id);        $content->setAttrib('rows', $rows);        $content->setLabel($label);        $content->addFilter(new Form_Filter_Stripslashes());        if($require == true)        {            $content->setRequired(TRUE);            $content->addErrorMessage('This is Required Filed');        }        $this->addElement($content);    }    public function Text($name , $label , $require = false , $filter = null , $class = null)    {        $title = $this->createElement('text',$name);        $title->setAttrib('size', '40');        if($require == true)        {            $title->setRequired(TRUE);            $title->addErrorMessage('الحقل اجباري');        }        if($filter != null)        {            $title->addFilter(new $filter());        }        if($class != null)        {            $title->setAttrib('class', $class);        }               $title->setLabel($label);        $this->addElement($title);    }    public function Upload($name,$ext,$label)    {        $upload = $this->createElement('file',$name);        $upload->setRequired(FALSE);        $upload->setDescription('Allow Extension : '.$ext);        $upload->setDestination(APPLICATION_PATH . '/../MyUpload/');        $upload->addValidator('Count', false, 2);        $upload->addValidator('Size', false, 100485760);        if(isset($_FILES[$name]))        {            $filename = strtolower($_FILES[$name]['name']);            $exts = split("[/\\.]", $filename);            $rand = rand(0,9999);            $time = time();            $rep = $rand.$time;            $imagemedia = $rep.'.'.end($exts);	        $upload->addFilter("Rename",array("target" => 'MyUpload/'.$imagemedia,"overwrite" => true));        }        $upload->addValidator('Extension', false, $ext);        $upload->setLabel($label);        $upload->setOrder('10');        $this->addElement($upload);        if($this->options['EditRow'][$name])        {            $a = new Form_Elements_Html($name.'_lastval');            $a->setValue(''.$this->options['EditRow'][$name]);            $a->setLabel($label.' Found ');            $a->setDecorators($this->loadDecoration('all'));            $this->addElement($a);        }    }    public function removeDecorator($elemtnName) {            $this->getElement($elemtnName)->setDecorators(array('ViewHelper',            'Description',            'Errors'));    }    public function elmentDecorator($elemtnName , $decorator)    {        $arr = array_merge((array) array($decorator) , (array) $this->loadDecoration('all') );        unset($arr[1]);        $this->getElement($elemtnName)->setDecorators($arr);    }  }